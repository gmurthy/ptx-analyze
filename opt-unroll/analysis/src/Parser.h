#ifndef _PARSER_H_INCLUDED_
#define _PARSER_H_INCLUDED_

#include "Statement.h"
#include "Reader.h"
#include <string>
#include <stack>
using namespace std;

// This parser is very simple. It just needs to parse
// line after line of ptx instructions and pass them on
// to the kernel - which builds a stream of Instruction
// objects based on the parsed strings. Occasionally, the
// parser will have to distinguish between instructions,
// labels and directives. Since we're not building a parse
// tree or an AST or such, we can keep the parser really
// simple

// Important: As of now, the parser only expects to read
// the ptx output from decuda and will choke on (or atleast
// malfunction on) ptx generated by nvcc - this will be fixed
// in the future

class Parser
{
	public:
	Parser(Reader *);
	Parser(const Parser&);
	~Parser();
	Statement * Parse();
	inline bool HasMoreKernels() const {return !end;}
	inline bool Done() const {return (done || end);}
	inline void Reinit() {done = false;}

	// A bunch of static convenience routines to help the other
	// classes parse strings of information. These could possibly
	// be made global, but logically, they belong here
	static const unsigned ParseOpCount(const string&);
	static Opcode ParseOpCode(const string&);
	static bool SearchOpcode(const string&, string[]);
	static bool IsGlobalOp(const string&);
	static bool IsSharedOp(const string&);
	static bool IsLocalOp(const string&);
	static bool FindOpInBuffer(const string&, const string&);
	static string GetOperandAt(const string&, unsigned);
	static const unsigned GetInstPos(const string&);
	static string GetInstructionBufferFromLabel(const string&);
	static string GetLabelBuffer(const string&);
	static bool IsComment(const string&);
	static bool IsInstruction(const string&);
	static bool IsLabel(const string&);
	static bool IsDirective(const string&);
	static bool IsRet(const string&);
	static bool IsCall(const string&);
	static unsigned ParseLabelNumber(const string&);
	static bool HasInlineComment(const string&);
	static void StripInlineComment(string&);
	static void ParseMemOp(const string&, MemOp&);
	static void ParseRegs(const string&, int&, int&, int&, int&);

	// Arrays of ptx opcodes, essential for classifying instructions
	static string alu_opcs[];
	static string branch_opcs[];
	static string mem_opcs[];
	static string sync_opcs[];

	// A few constant helper objects
	static const string& _SENTINEL_;
	static const string& GLOBAL_OP_STR;
	static const string& SHARED_OP_STR;
	static const string& LOCAL_OP_STR;

	private:
	Reader *reader;
	bool done, end;
	string buffer;
	stack <int> paren_stack;
};

#endif
